<?php

namespace App\IssueBundle\Migrations\Data\Demo\ORM;

use App\IssueBundle\Entity\Issue;
use App\IssueBundle\Entity\Priority;
use App\IssueBundle\Entity\Resolution;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class LoadIssue.
 */
class LoadIssue extends AbstractFixture implements ContainerAwareInterface
{
    /**
     * @var ContainerInterface
     */
    private $container;

    /**
     * @param ObjectManager $manager
     */
    public function load(ObjectManager $manager)
    {
        $user = $this->loadUser($manager);
        for ($i = 0; $i < 50; ++$i) {
            $issue = new Issue();
            $issue->setOrganization($user->getOrganization());
            $issue->setPriority($this->loadPriority($manager));
            $issue->setResolution($this->loadResolution($manager));
            $issue->setReporter($user);
            if ($i % 2 === 0) {
                $issue->setAsignee($user);
            }

            $issue->setCode('ISSUE-'.mt_rand(0, 123));
            $issue->setDescription('Lorem ipsum amet dolor sit'.mt_rand(0, 123));
            $issue->setSummary('Lorem ipsum amet dolor sit'.mt_rand(0, 123));
            $issue->setType(mt_rand(0, 3));
            if ($issue->getType() == Issue::TYPE_STORY) {
                $subtasks = $this->createSubTasks($manager);
                $issue->setChildren($subtasks);
            }

            $manager->persist($issue);
            $this->container->get('issue.model.colaborator_collector')->updateCollaborators($issue);
        }
        $manager->flush();
    }

    /**
     * @param ObjectManager $manager
     *
     * @return ArrayCollection
     */
    private function createSubTasks(ObjectManager $manager)
    {
        $subtasks = new ArrayCollection();
        /**
         * @var \Oro\Bundle\UserBundle\Entity\User
         */
        $user = $this->loadUser($manager);

        $priority = $this->loadPriority($manager);

        for ($i = 0; $i < 5; ++$i) {
            $n = $i + 1;

            $issue = new Issue();
            $issue->setOrganization($user->getOrganization());

            $issue->setSummary('Example subtask #'.$n);
            $issue->setCode('TEST sub'.$n);
            $issue->setDescription('This is an example, autogenerated, issue.');
            $issue->setType(Issue::TYPE_SUBTASK);
            $issue->setPriority($priority);
            $issue->setReporter($user);
            if ($i % 2 === 0) {
                $issue->setAsignee($user);
            }
            $issue->setCreated(new \DateTime('now'));
            $issue->setUpdated(new \DateTime('now'));

            $this->container->get('issue.model.colaborator_collector')->updateCollaborators($issue);

            $manager->persist($issue);

            $subtasks->add($issue);
        }

        return $subtasks;
    }

    /**
     * @param ObjectManager $manager
     *
     * @return User
     */
    private function loadUser(ObjectManager $manager)
    {
        $user = $manager->getRepository('OroUserBundle:User')->findOneBy(['username' => 'admin']);

        return $user;
    }

    /**
     * @param ObjectManager $manager
     *
     * @return Priority
     */
    private function loadPriority(ObjectManager $manager)
    {
        $priorities = $manager->getRepository('IssueBundle:Priority')->findAll([]);
        $priority = $priorities[array_rand($priorities)];

        return $priority;
    }

    /**
     * @param ObjectManager $manager
     *
     * @return Resolution
     */
    private function loadResolution(ObjectManager $manager)
    {
        $resolutions = $manager->getRepository('IssueBundle:Resolution')->findAll([]);
        $resolution = $resolutions[array_rand($resolutions)];

        return $resolution;
    }

    /**
     * @param ContainerInterface|null $container
     */
    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }
}
